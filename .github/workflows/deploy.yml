name: Deploy to OVH VPS

on:
  push:
    branches: [production]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test || echo "No tests configured"

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to OVH VPS via cPanel
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "dist/*"
          target: "/home/jude/web/scriptwind.com/public_html/"
          strip_components: 1

      - name: Create .htaccess for SPA routing
        run: |
          echo 'RewriteEngine On' > .htaccess
          echo 'RewriteBase /' >> .htaccess
          echo 'RewriteRule ^index\.html$ - [L]' >> .htaccess
          echo 'RewriteCond %{REQUEST_FILENAME} !-f' >> .htaccess
          echo 'RewriteCond %{REQUEST_FILENAME} !-d' >> .htaccess
          echo 'RewriteRule . /index.html [L]' >> .htaccess

      - name: Upload .htaccess
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: ".htaccess"
          target: "/home/jude/web/scriptwind.com/public_html/"

      - name: Determine version bump
        id: version
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Check for conventional commit types
          if echo "$COMMIT_MSG" | grep -q "^#major"; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MSG" | grep -q "^#minor"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MSG" | grep -q "^#patch"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Extract version numbers
          VERSION_NUMBERS=$(echo $LATEST_TAG | sed 's/v//')
          MAJOR=$(echo $VERSION_NUMBERS | cut -d. -f1)
          MINOR=$(echo $VERSION_NUMBERS | cut -d. -f2)
          PATCH=$(echo $VERSION_NUMBERS | cut -d. -f3)

          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_MAJOR=${{ steps.current_version.outputs.major }}
          CURRENT_MINOR=${{ steps.current_version.outputs.minor }}
          CURRENT_PATCH=${{ steps.current_version.outputs.patch }}
          BUMP_TYPE="${{ steps.version.outputs.bump }}"

          if [ "$BUMP_TYPE" = "major" ]; then
            NEW_MAJOR=$((CURRENT_MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEW_MAJOR=$CURRENT_MAJOR
            NEW_MINOR=$((CURRENT_MINOR + 1))
            NEW_PATCH=0
          else
            NEW_MAJOR=$CURRENT_MAJOR
            NEW_MINOR=$CURRENT_MINOR
            NEW_PATCH=$((CURRENT_PATCH + 1))
          fi

          NEW_VERSION="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_major=$NEW_MAJOR" >> $GITHUB_OUTPUT
          echo "new_minor=$NEW_MINOR" >> $GITHUB_OUTPUT
          echo "new_patch=$NEW_PATCH" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          release_name: Release ${{ steps.new_version.outputs.new_version }}
          body: |
            ## 🚀 Production Deployment - ${{ steps.new_version.outputs.new_version }}

            **Version:** ${{ steps.version.outputs.type }} release
            **Build Number:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            **Deployed:** ${{ github.event.head_commit.timestamp }}

            ### Changes in this release:
            - Automated deployment from production branch
            - Built and tested successfully
            - Deployed to OVH VPS

            ### Version Information:
            - **Previous Version:** ${{ steps.current_version.outputs.current }}
            - **New Version:** ${{ steps.new_version.outputs.new_version }}
            - **Bump Type:** ${{ steps.version.outputs.type }}

            ### Technical Details:
            - Node.js version: 18
            - Build tool: Vite
            - Framework: React + TypeScript

            ### Commit Message:
            ```
            ${{ steps.version.outputs.commit_msg }}
            ```

            ---
            *This release was automatically generated by GitHub Actions*

      - name: Merge to main
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git checkout main
          git pull origin main
          git merge origin/production
          git push origin main

      - name: Tag main branch
        run: |
          git tag -a ${{ steps.new_version.outputs.new_version }} -m "Release ${{ steps.new_version.outputs.new_version }}"
          git push origin ${{ steps.new_version.outputs.new_version }}

      - name: Cleanup production branch
        run: |
          git push origin --delete production
          git checkout -b production
          git push -u origin production

      - name: Deployment Success
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "🌐 Website deployed to: https://scriptwind.com"
          echo "📦 Release created: ${{ steps.new_version.outputs.new_version }}"
          echo "🔄 Production branch merged to main"
          echo "🏷️ Version bumped: ${{ steps.current_version.outputs.current }} → ${{ steps.new_version.outputs.new_version }}"
          echo "📝 Bump type: ${{ steps.version.outputs.type }}"
